# Trading Simulation Optimizer - README

## Описание
Этот проект представляет собой набор скриптов для симуляции сделок и оптимизации параметров торговых стратегий. Основной код состоит из трех файлов:

- **main.py**: осуществляет симуляцию сделок на основе исторических данных и настроек параметров стратегии.
- **config.py**: содержит конфигурационные параметры, которые используются для выполнения симуляции сделок.
- **optimizer.py**: оптимизирует параметры стратегии с использованием различных алгоритмов, таких как дифференциальная эволюция, случайный поиск и имитация градиентного спуска.

## Установка
1. Убедитесь, что у вас установлен Python 3.x и необходимые библиотеки.
2. Клонируйте репозиторий проекта на свой компьютер.
3. Установите необходимые библиотеки с помощью команды:

   ```bash
   pip install -r requirements.txt
   ```

## Конфигурация
Перед запуском симуляции и оптимизации, отредактируйте файл **config.py**, чтобы настроить параметры в соответствии с вашими предпочтениями. Основные параметры включают:

- **initial_balance**: начальный баланс (например, 1000).
- **deal_amount**: сумма на каждую сделку (например, 100).
- **stop_loss_percent**: процент для стоп-лосса (например, -50).
- **take_profit_percentages**: список процентных уровней для фиксации прибыли (например, [100, 200, 300]).
- **position_percentages**: процент закрытия позиции на каждом уровне фиксации прибыли (например, [50, 50, 50]).
- **file_path**: путь к файлу с данными (например, 'input.xlsx').

Файл данных должен содержать исторические данные сделок в формате Excel (например, **input.xlsx**), включая такие столбцы, как **EntryPrice**, **DeepPrice**, **ATHpriceAfterSignal**, и **Token**.

## Запуск Симуляции Сделок
Чтобы запустить симуляцию сделок с текущими параметрами, выполните команду:

```bash
python main.py
```

Этот скрипт обработает все сделки из файла данных и выведет итоговый баланс и статистику по сделкам.

## Оптимизация Параметров
Для оптимизации параметров стратегии с помощью различных алгоритмов выполните команду:

```bash
python optimizer.py
```

Этот скрипт выполнит оптимизацию с использованием следующих алгоритмов:

- **Дифференциальная эволюция**
- **Случайный поиск**
- **Имитация градиентного спуска**

Оптимизация будет выполняться в трех параллельных потоках, и по завершении выполнения скрипт выведет лучшие найденные параметры и итоговый баланс для каждого алгоритма.

## Основные Компоненты

- **main.py**: Этот файл содержит логику для выполнения симуляции сделок на основе заданных параметров.
- **config.py**: Файл для настройки конфигурации симуляции, включая начальный баланс, сумму сделки, уровни стоп-лосса и тейк-профита.
- **optimizer.py**: Содержит реализацию трех методов оптимизации параметров для улучшения стратегии на основе исторических данных.

## Используемые Алгоритмы Оптимизации
1. **Дифференциальная эволюция**: Метод глобальной оптимизации для нахождения лучших параметров, таких как уровень тейк-профита и процент позиции для фиксации.
2. **Случайный поиск**: Метод случайного выбора параметров из заданных диапазонов для нахождения оптимальных значений.
3. **Имитация градиентного спуска**: Градиентный метод для локального поиска улучшенных параметров, используя случайные отклонения.

## Результаты Оптимизации
По завершении оптимизации все алгоритмы выведут найденные параметры и лучший баланс:

- **Deal Amount**: Лучшая сумма сделки.
- **Stop Loss Percent**: Процент стоп-лосса (фиксированный в -50%).
- **Take Profit Percentages**: Лучшие уровни тейк-профита.
- **Position Percentages**: Лучшая стратегия закрытия позиций на уровнях тейк-профита.

## Требования
- **Python 3.x**
- **Pandas**
- **Numpy**
- **SciPy**
- **openpyxl**

Установите все зависимости с помощью файла **requirements.txt**.

## Контакты
Если у вас возникли вопросы или проблемы с кодом, обращайтесь за помощью.

